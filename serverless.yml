service: planets-api
frameworkVersion: "3"

plugins:
  - serverless-iam-roles-per-function
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: us-east-1
  environment:
    DYNAMODB_TABLE_NAME: ${self:custom.planetTableName}

custom:
  planetTableName: post-table-${self:provider.stage}
  dynamodb:
    stages:
      - dev
    start:
      migrate: true
  serverless-offline: true # http prxy

functions:
  getPlanet:
    handler: src/handlers/getById.get
    name: get-planet-by-id
    description: Get planet by id
    memorySize: 128 # min mb
    timeout: 5
    events:
      - http:
          path: planets/{id}
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: !GetAtt PlanetTable.Arn

  createPlanet:
    handler: src/handlers/create.create
    name: create-planet
    description: Create a new Planet
    memorySize: 128 # min mb
    timeout: 5
    events:
      - http:
          path: planets
          method: POST
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
        Resource: !GetAtt PlanetTable.Arn

  list:
    handler: src/handlers/list.list
    name: list-planets
    description: List all available planets
    memorySize: 128
    timeout: 5
    events:
      - http:
          path: planets
          method: get
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
        Resource: !GetAtt PlanetTable.Arn

resources:
  Resources:
    PlanetTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.planetTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
